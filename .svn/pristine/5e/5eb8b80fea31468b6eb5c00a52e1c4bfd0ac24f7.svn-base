<?php

namespace App\Http\Controllers\admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use App\Http\Controllers\Controller;
use Carbon\Carbon;
use Auth;
use App\dsa;
use App\proofs;
use App\address;
use App\country;
use App\paymentdetails;
use App\reference;
use App\bank;
use App\memberregistration;
use App\hr_emp_personal_details;
use App\hr_company;
use App\hr_branch;
use App\hr_department;
use App\hr_religion;
use App\hr_designation;
use App\User;
use App\hr_emp_address;
use App\hr_emp_certificate;
use App\hr_emp_experience;
use App\hr_emp_family_details;
use App\hr_emp_qualification;
use App\hr_emp_references;
use App\hr_emp_skills;
use App\hr_emp_proofs;
use App\log;
use App\hr_salary_allowance;
class dsaUpgradeController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('admin.Upgradedsa.dsaUpgrade');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request)
    {

        $dsaCode=$request->dsaCode;
        $checkdsaDetails=User::where('logins.username', '=', $dsaCode)->first();
        
        if($checkdsaDetails->status == "Active")
        {
            $dsaId=$checkdsaDetails->id;
            $memberDetails=memberregistration::join('logins','logins.id','=','memberregistrations.userId')->where('memberregistrations.addedById', '=', $dsaId)->where('logins.status', '=', 'Active')->select('logins.status as status', 'memberregistrations.*')->get();

             return view('admin.Upgradedsa.viewMemberPage',compact('memberDetails','dsaCode'));
        }
        else
        {
            return;
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        
        $code_username=hr_emp_personal_details::max('id');
        $username=str_pad($code_username,10,"0",STR_PAD_LEFT);
        $dsaDetails=dsa::join('logins','logins.id','=','userId')->select('logins.id as ids', 'dsas.*')->where('logins.username', $id)->first();
        $dsaId=$dsaDetails->ids;
        $dsaAddress=dsa::join('addresses','addresses.userId','=','dsas.userId')->where('addresses.userId', $dsaId)->get();
        $dsaProof=proofs::join('dsas','dsas.userId','=','proofs.userId')->where('proofs.userId', $dsaId)->first();
        $dsapaymentdetails=paymentdetails::join('dsas','dsas.userId','=','paymentdetails.userId')->where('paymentdetails.userId', $dsaId)->first();
        $dsabank=dsa::join('banks','banks.userId','=','dsas.userId')->where('banks.userId', $dsaId)->first();
        $dsareference=reference::join('dsas','dsas.userId','=','references.userId')->where('references.userId', $dsaId)->select('references.*')->first();

        $listTypes= ['country'=>country::all(),
                     'company'=>hr_company::all(),
                     'branch'=>hr_branch::all(),
                     'designation'=>hr_designation::all(),
                     'department'=>hr_department::all(),
                     'proof_type'=>['aadhar', 'license', 'pancard', 'passport','VoterId'],
                     'religion'=>hr_religion::all()];

        return view('admin.UpgradeDsa.dsaDetails',compact('dsaDetails','dsaAddress','dsaProof','dsapaymentdetails','dsabank','dsareference','username','listTypes','id'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request)
    {


        // $this->validate($request,[
        // 'emplyee_id'=>'required',
        // 'name'=>'required',
        // ]);


        $persoanl = new hr_emp_personal_details;
        $c_address = new hr_emp_address;
        $t_address = new hr_emp_address;
        $skills = new hr_emp_skills;
        $proofs = new hr_emp_proofs;

        $dsaId = $request->dsa_code;
        $login = User::where('userName','=',$dsaId)->select('logins.id as userId')->first();
        $user_id=$login->userId;
        $login_update=User::Find($user_id);
        $login_update->userName=$request->emplyee_id;
        $login_update->userType='ME';
        $login_update->save();

        //photo upload
        if (!empty($request->photo)) 
        {
                     //photo upload
        $profilepic = 'HEERA_EMPLOYEE'.time().'.'.$request->photo->getClientOriginalExtension();
        $request->photo->move(storage_path('img/dsa_img'), $profilepic);
            $persoanl->photo = $profilepic;
        }
        else
        {
            $persoanl->photo = $request->photo_update;
        }
         
        $persoanl->user_id=$user_id;
        $persoanl->name=$request->name;
        $persoanl->salutation_name=$request->emp_name;
        $persoanl->salutation_guardian=$request->emp_name_g;
        $persoanl->code=$request->emplyee_id;
        $persoanl->guardian=$request->gname;
        $persoanl->gender=$request->gender;
        $persoanl->dob=date("Y-m-d", strtotime($request->dob));
        $persoanl->marital_status=$request->marital_s;
        $persoanl->religion=$request->religion;
        $persoanl->caste=$request->caste;
        $persoanl->bloodgroup=$request->bloodgroup;
        $persoanl->nationality=$request->nationality;
        $persoanl->mobile=$request->mobile;
        $persoanl->email=$request->email;
        $persoanl->company_id=$request->company;
        $persoanl->branch_id=$request->branch;
        $persoanl->department_id=$request->department;
        $persoanl->designation_id=$request->designation;
        $persoanl->date_of_joining=date("Y-m-d", strtotime($request->dateofjoing));
        $persoanl->work_shift=json_encode(array('from' => $request->workshift_from, 'to'=>$request->workshift_to));
        $persoanl->salary=$request->monthly_sal;
        $persoanl->job_type=$request->jobtype;
        $persoanl->added_id=Auth::guard('admin')->user()->id;
        $persoanl->save();

        $c_address->user_id=$user_id;
        $c_address->address=$request->c_address;
        $c_address->city=$request->c_city;
        $c_address->state=$request->c_state;
        $c_address->country=$request->c_country;
        $c_address->zip_code=$request->c_zip;
        $c_address->type='correspondence';
        $c_address->save();

        $t_address->user_id=$user_id;
        $t_address->address=$request->p_address;
        $t_address->city=$request->p_city;
        $t_address->state=$request->p_state;
        $t_address->country=$request->p_country;
        $t_address->zip_code=$request->p_zip;
        $t_address->type='permanent';
        $t_address->save();


        $skills->user_id=$user_id;
        $skills->computer=$request->computer_skill;
        $skills->typing_speed=$request->typing_speed;
        $skills->knowldge=$request->knowledge;
        $skills->hobbies=$request->hobbies;
        $skills->save();

        $proofs->user_id=$user_id;
        $proofs->proof_type=$request->proof_type;
        $proofs->proof_number=$request->proof_number;
        $proofs->save();



        for ($i=0; $i<count($request->course_cer); $i++ ) {
            if($request->course_cer[$i]!=''){
            $certificate = new hr_emp_certificate;
            $certificate->user_id=$user_id;
            $certificate->course=$request->course_cer[$i];
            $certificate->authority=$request->authority[$i];
            $certificate->institution=$request->institution[$i];
            $certificate->year=$request->year_cer[$i];
            $certificate->save();
            }
        }

        for ($i=0; $i<count($request->exp_organisation); $i++ ) {
            if($request->exp_organisation[$i]!=''){
            $experience = new hr_emp_experience;
            $experience->user_id=$user_id;
            $experience->organisation=$request->exp_organisation[$i];
            $experience->designation=$request->exp_designation[$i];
            $experience->responsibilities=$request->exp_responsibilities[$i];
            $experience->income=$request->exp_income[$i];
            $experience->timeperiod=$request->exp_period[$i].'-'.$request->exp_period_2[$i];
            $experience->save();
            }
        }

        for ($i=0; $i<count($request->f_name); $i++ ) {
            if($request->f_name[$i]!=''){
            $family = new hr_emp_family_details;
            $family->userid=$user_id;
            $family->name=$request->f_name[$i];
            $family->relationship=$request->f_relation[$i];
            $family->gender=$request->f_gender[$i];
            $family->mobile=$request->f_mobile[$i];
            $family->save();
            }
        }
        for ($i=0; $i<count($request->course); $i++ ) {
            if($request->course[$i]!=''){
            $qualification = new hr_emp_qualification;
            $qualification->user_id=$user_id;
            $qualification->course=$request->course[$i];
            $qualification->university=$request->ac_institution[$i];
            $qualification->pass_out=$request->year_pass[$i];
            $qualification->marks=$request->mark_pers[$i];
            $qualification->specialization=$request->specialization[$i];
            $qualification->save();
            }
        }
        for ($i=0; $i<count($request->r_name); $i++ ) {
            if($request->r_name[$i]!=''){
            $reference = new hr_emp_references;
            $reference->user_id=$user_id;
            $reference->name=$request->r_name[$i];
            $reference->mobile_no=$request->r_mobile[$i];
            $reference->email_id=$request->r_email[$i];
            $reference->relationship=$request->r_relationship[$i];
            $reference->save();
            }
        }

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
